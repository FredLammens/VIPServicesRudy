// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations.VIPServicesRudyTest
{
    [DbContext(typeof(VIPServicesRudyTestContext))]
    [Migration("20200731163150_InitTestDB")]
    partial class InitTestDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainLibrary.Domain.Clients.Category", b =>
                {
                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Clients.Client", b =>
                {
                    b.Property<int>("ClientNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieName")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VATNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientNumber");

                    b.HasIndex("CategorieName");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Clients.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Aantal")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryName")
                        .HasColumnType("int");

                    b.Property<float>("Korting")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.Arrangement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArrangementType")
                        .HasColumnType("int");

                    b.Property<int?>("LimousineId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LimousineId");

                    b.ToTable("Arrangements");

                    b.HasDiscriminator<int>("ArrangementType");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.Hours.Hour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HourType")
                        .HasColumnType("int");

                    b.Property<int?>("HourlyArrangementId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("PriceCalculationId")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HourlyArrangementId");

                    b.HasIndex("PriceCalculationId");

                    b.ToTable("Hour");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.Limousine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstHourPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Limousines");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Reservering.PriceCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChargedDiscounts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Subtotal")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalExclusiveVAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VATAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PriceCalculation");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Reservering.Reservation", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientNumber")
                        .HasColumnType("int");

                    b.Property<int?>("DetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceCalculationId")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("ClientNumber");

                    b.HasIndex("DetailsId");

                    b.HasIndex("PriceCalculationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Reservering.ReservationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArrangementId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalLocation")
                        .HasColumnType("int");

                    b.Property<int?>("LimousineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartLocation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementId");

                    b.HasIndex("LimousineId");

                    b.ToTable("ReservationDetails");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.FixedArrangements.NightLife", b =>
                {
                    b.HasBaseType("DomainLibrary.Domain.Limousines.Arrangement");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.FixedArrangements.Wedding", b =>
                {
                    b.HasBaseType("DomainLibrary.Domain.Limousines.Arrangement");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.FixedArrangements.Wellness", b =>
                {
                    b.HasBaseType("DomainLibrary.Domain.Limousines.Arrangement");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.HourlyArrangements.HourlyArrangement", b =>
                {
                    b.HasBaseType("DomainLibrary.Domain.Limousines.Arrangement");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("DomainLibrary.Domain.Clients.Client", b =>
                {
                    b.HasOne("DomainLibrary.Domain.Clients.Category", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieName");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Clients.Discount", b =>
                {
                    b.HasOne("DomainLibrary.Domain.Clients.Category", null)
                        .WithMany("StaffDiscount")
                        .HasForeignKey("CategoryName");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.Arrangement", b =>
                {
                    b.HasOne("DomainLibrary.Domain.Limousines.Limousine", null)
                        .WithMany("FixedArrangements")
                        .HasForeignKey("LimousineId");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Limousines.Hours.Hour", b =>
                {
                    b.HasOne("DomainLibrary.Domain.Limousines.HourlyArrangements.HourlyArrangement", null)
                        .WithMany("Hours")
                        .HasForeignKey("HourlyArrangementId");

                    b.HasOne("DomainLibrary.Domain.Reservering.PriceCalculation", null)
                        .WithMany("Hours")
                        .HasForeignKey("PriceCalculationId");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Reservering.Reservation", b =>
                {
                    b.HasOne("DomainLibrary.Domain.Clients.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientNumber");

                    b.HasOne("DomainLibrary.Domain.Reservering.ReservationDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId");

                    b.HasOne("DomainLibrary.Domain.Reservering.PriceCalculation", "PriceCalculation")
                        .WithMany()
                        .HasForeignKey("PriceCalculationId");
                });

            modelBuilder.Entity("DomainLibrary.Domain.Reservering.ReservationDetails", b =>
                {
                    b.HasOne("DomainLibrary.Domain.Limousines.Arrangement", "Arrangement")
                        .WithMany()
                        .HasForeignKey("ArrangementId");

                    b.HasOne("DomainLibrary.Domain.Limousines.Limousine", "Limousine")
                        .WithMany()
                        .HasForeignKey("LimousineId");
                });
#pragma warning restore 612, 618
        }
    }
}
